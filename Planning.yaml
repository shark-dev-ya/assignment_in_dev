GroupAssignment:
  MainComponent:
  File_IO:
    req1: we will use C++
    req2: we are working with std::string type.
    BigTask: write a C++ class to work with files.
      - create header and source file for C++ class
      - create an empty class.
      - create a source file for main function and some tests. / int main(int argc, char*argv[]) 
      - include neccessary header files
      - define main function and create an object of a class for file File_IO

      - ?build it and see at least some output
      - checkpoint
      - add constructor and destructor for a Class. 
      - choose a class as a container for strings (std::list, std::vector, etc)
      - define 4 functions with almost empty body and maybe debug prints

      - add a logic to open and close a file 
      - implement the 4 functions correctly (split into snall sub-tasks if needed)
      -  ?build a class as a library, build main function with linking a labirary
      - rewrite a functinliaty for main function to be as "echo"
    LeftOver: 
      - write UT using GoogleTest
      - write ComponentTests using Python
  CAN_Messages:


Planning:
  Friday_01_13:
    - Exercise1: |
        In github -> Your private repo : Create 2 branches ( develop , feature )
        In your local repo:
        0) fetch changes.
        1) checkout "develop" branch.
          1.1) create a text file,which contains a text line "i am from develop branch" 
          1.2) commit your change in local repo in a branch (develop)
          1.3) push your "develop" branch to remote repo.
               -> git push origin develop
        2) checkout "feature" branch.
          2.1) create a text file,which contains a text line "i am from feature branch" 
          2.2) commit your change in local repo in a branch (feature)
          1.3) push your "feature" branch to remote repo.
               -> git push origin feature
        3) check on github webpage, that you have:
          3.1) in a branch "develop": a text file with text.
          3.2) in a branch "feature": a text file with text.
    - Main Work:
      - ?build it and see at least some output
      - checkpoint ( share your repo with shark, so he can check it.)
      - add constructor and destructor for a Class (File_IO). (you can print a messsage for now) 
      - |
        choose a class as a container for strings (std::list, std::vector, etc)
        Take a look at these webpages:
        https://cplusplus.com/reference/list/list/push_back/ 
        https://cplusplus.com/reference/vector/vector/push_back/ 

      - define 4 functions with almost empty body and maybe debug prints
  Monday_01_16:
    - add a logic to open and close a file 
      Remember of a situation if file doesn't exist.
    - implement the 4 functions correctly (split into snall sub-tasks if needed)
        - read from a file a line of string.
        - read from a file a container of strings.
        - write to a file a string, which contains exactly 1 line.
        - write to a file a container of strings.
    -  ?build a class as a library, build main function with linking a library
        We adapting our (Makefile|CMakeLists.txt) to build class separately.
        and build main.cpp file also separately with linking a library.
        
        TODO:: add info how to build and link a library in Makefile.

    - rewrite a functionality for main function to be as "echo"

    - If you have done tasks above (except build a library/executable file)
     then you can start to work on "Main Component" part - 
     - create a folder
     - create a Makefile|CMakeLists.txt
     - create a source file 
     - define main function. 







# V2 - V4 





CAN_Messages:
  Preparation:
    - generate json file ( or take it )
    - create a Python script (in your private repo, you have a folder "CAN_Messages")
    - write a function to read a json file and print it on the console.
    - make folders (for output files)
    - write a function in Python script to write list of strings into a file
    - function to convert json filename into uppercase and generate related lines.
    - using variables and strings -> format output C++ code. 
    - write functions to generate a text with placeholders instead of unknown variables.
    - define functions to generate a string with get_ , set_ and private fielld for each element.
    - 


  What don't we know yet:
    - Convert json data into C++ code?
    - Ut for python?









Thursday Plan:
  - Active and "Hot" discussions how to implement or solve Main Component 
  - Planning part -> filling in the YAML file with steps and INFO 
  - (If we have time) -> Fixing CMAke for Main Component to link file_io library


# V5 - V6
MainComponent:
  Dependencies:
    - File_IO:
       - read a content ( line-by-line or the whole file)
       - write a content ( line-by-line or the whole container of strings)
    - CAN_Messages:
  Input:
    - filename to read ( we are expecting a file name of a .txt file (text file))
    - optional filename to write ( for an output file).

    - a format: ./main_component <input> <?output>
    - an example of a call: ./main_component commands.txt
    - an example of a call: ./main_component commands.txt commands_in_json.txt
  Output:
    - write the resulting string ( after each function call) in an output file
  Logic:
    step1: user calls an executable file (main_component) with provided filename / filenames
    step2: MainComponent uses file_io component(lib) to read the input file. 

    step3:
      description: iterate through each of the strings and convert it into JSON Line.
      substep1: For the each line in the data read from the input file
      tip_for_step2: |
        write a function, which takes a string, checks the beginning (is it "get" or "set")
        write 2 functions:
        1) which parses "get" command/line
        2) which parses "set" command/line
        in the big function, check the first 3 letters and if:
          it starts with "get" -> call a function to parse "get" line 
          it starts with "set" -> call a function to parse "set" line.
        P.S. It is fine to have a bunch of "if/else"
      substep2: |
        call a (function/class method) from a generated class (from CAN_messages) 
        according to the text, which is stated in the line.
      substep3: returned string from the(function/class method) we write into output file.    

    stepEnd: |
      write the generated output (in JSON format) by using file_io component
      into an output file.

  Tasks:



